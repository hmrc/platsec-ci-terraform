version: 0.2

env:
  shell: bash

phases:
  pre_build:
    commands:
      - echo -n "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" | docker login --username AWS --password-stdin "${ECR_URL}"
  build:
    commands:
      - docker load -i docker.tar
      - export NEW_IMAGE_TAG="${CODEBUILD_BUILD_NUMBER}-${COMMIT_ID}"
      - docker tag container-release:local "${ECR_URL}:${NEW_IMAGE_TAG}"
      - docker push "${ECR_URL}:${NEW_IMAGE_TAG}"
  post_build:
    commands:
      - |
        STS="$( \
          aws sts assume-role \
          --role-arn "${DEPLOYMENT_ROLE_ARN}" \
          --role-session-name "${CODEBUILD_BUILD_ID%:*}-${CODEBUILD_BUILD_NUMBER}" \
          --query "Credentials" \
          )"
      - aws configure set profile.docker-deployment.aws_access_key_id "$(jq -r '.AccessKeyId' <<<"${STS}")"
      - aws configure set profile.docker-deployment.aws_secret_access_key "$(jq -r '.SecretAccessKey' <<<"${STS}")"
      - aws configure set profile.docker-deployment.aws_session_token "$(jq -r '.SessionToken' <<<"${STS}")"
      - echo -n "Deploying new container image to lambda ${NEW_IMAGE_TAG}"
      - |
        aws lambda update-function-code \
          --function-name "${LAMBDA_ARN}" \
          --image-uri "${ECR_URL}:${NEW_IMAGE_TAG}" \
          --publish \
          --profile docker-deployment
